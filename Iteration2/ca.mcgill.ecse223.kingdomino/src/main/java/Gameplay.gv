// Code generated by Umple 1.29.0.4181.a593105a9

digraph "Gameplay" {
  compound = true;
  size="80,10"

  // Class: Gameplay

    // Top Level StateMachine: gamestatus
    
    // Start states are shown as a black circle
    node [shape = point, fillcolor="black", width=0.2 ];
    start_Gameplay_gamestatus [ tooltip = "Class Gameplay, SM gamestatus, State start" ];
    
        
    // Format for normal states
    node [shape = rectangle, width=1,style=rounded];
    
      // State: Initializing

     subgraph clusterGameplay_gamestatus_Initializing {
      label = "Initializing";
      style = rounded;

      // Bottom Level StateMachine: Initializing
      
      // Start states are shown as a black circle
      node [shape = point, fillcolor="black", width=0.2 ];
      start_Gameplay_Initializing [ tooltip = "Class Gameplay, SM gamestatus, State Initializing.start" ];
      
            
      // Format for normal states
      node [shape = rectangle, width=1,style=rounded];
      
        // State: CreatingFirstDraft

        Gameplay_gamestatusInitializing_CreatingFirstDraft [label = CreatingFirstDraft, tooltip = "Class Gameplay, SM gamestatus, State Initializing.CreatingFirstDraft&#13;Entry:
   shuffleDominoPile();generateInitialPlayerOrder();"];
        // End State: CreatingFirstDraft

        // State: SelectingFirstDomino

        Gameplay_gamestatusInitializing_SelectingFirstDomino [label = SelectingFirstDomino, tooltip = "Class Gameplay, SM gamestatus, State Initializing.SelectingFirstDomino"];
        // End State: SelectingFirstDomino
      // End Bottom Level StateMachine: Initializing
     }
      // End State: Initializing

      // State: Ongoing

     subgraph clusterGameplay_gamestatus_Ongoing {
      label = "Ongoing";
      style = rounded;

      // Bottom Level StateMachine: Ongoing
      
      // Start states are shown as a black circle
      node [shape = point, fillcolor="black", width=0.2 ];
      start_Gameplay_Ongoing [ tooltip = "Class Gameplay, SM gamestatus, State Ongoing.start" ];
      
            
      // Format for normal states
      node [shape = rectangle, width=1,style=rounded];
      
        // State: CreatingNextDraft

        Gameplay_gamestatusOngoing_CreatingNextDraft [label = CreatingNextDraft, tooltip = "Class Gameplay, SM gamestatus, State Ongoing.CreatingNextDraft&#13;Entry:
   createNextDraft(); orderNextDraft();generateNextPlayerOrder();"];
        // End State: CreatingNextDraft

        // State: PreplacingDomino

        Gameplay_gamestatusOngoing_PreplacingDomino [label = PreplacingDomino, tooltip = "Class Gameplay, SM gamestatus, State Ongoing.PreplacingDomino"];
        // End State: PreplacingDomino

        // State: PlacingDomino

        Gameplay_gamestatusOngoing_PlacingDomino [label = PlacingDomino, tooltip = "Class Gameplay, SM gamestatus, State Ongoing.PlacingDomino&#13;Exit:
   calculatePlayerScore();"];
        // End State: PlacingDomino

        // State: DiscardingDomino

        Gameplay_gamestatusOngoing_DiscardingDomino [label = DiscardingDomino, tooltip = "Class Gameplay, SM gamestatus, State Ongoing.DiscardingDomino&#13;Exit:
   calculatePlayerScore();"];
        // End State: DiscardingDomino

        // State: SelectingDomino

        Gameplay_gamestatusOngoing_SelectingDomino [label = SelectingDomino, tooltip = "Class Gameplay, SM gamestatus, State Ongoing.SelectingDomino"];
        // End State: SelectingDomino
      // End Bottom Level StateMachine: Ongoing
     }
      // End State: Ongoing

      // State: Over

      Gameplay_gamestatus_Over [label = Over, tooltip = "Class Gameplay, SM gamestatus, State Over&#13;Entry:
   calculateRanking();"];
      // End State: Over
    // End Top Level StateMachine: gamestatus

  // All transitions
    start_Gameplay_gamestatus -> Gameplay_gamestatusInitializing_CreatingFirstDraft [  lhead=clusterGameplay_gamestatus_Initializing,  tooltip = "start to Initializing" ] ;
    start_Gameplay_Initializing -> Gameplay_gamestatusInitializing_CreatingFirstDraft [  tooltip = "start to Initializing.CreatingFirstDraft" ] ;
    Gameplay_gamestatusInitializing_CreatingFirstDraft -> Gameplay_gamestatusInitializing_SelectingFirstDomino [  tooltip = "From Initializing.CreatingFirstDraft to Initializing.SelectingFirstDomino automatically" ] ;
  
  Gameplay_gamestatusInitializing_SelectingFirstDomino -> Gameplay_gamestatusInitializing_SelectingFirstDomino [  label = "selectedFirst [!isSelectionValid()]", tooltip = "From Initializing.SelectingFirstDomino to Initializing.SelectingFirstDomino on selectedFirst&#13;Guard:  [!isSelectionValid()]" ] ;
  
  Gameplay_gamestatusInitializing_SelectingFirstDomino -> Gameplay_gamestatusInitializing_SelectingFirstDomino [  label = "selectedFirst [!isCurrentPlayerTheLastInTurn()] / {...}", tooltip = "From Initializing.SelectingFirstDomino to Initializing.SelectingFirstDomino on selectedFirst&#13;Guard:  [!isCurrentPlayerTheLastInTurn()]&#13;Transition Action:
   setNextPlayer();" ] ;
  
  Gameplay_gamestatusInitializing_SelectingFirstDomino -> Gameplay_gamestatusOngoing_CreatingNextDraft [  lhead=clusterGameplay_gamestatus_Ongoing,  label = "selectedFirst [isCurrentPlayerTheLastInTurn()]", tooltip = "From Initializing.SelectingFirstDomino to Ongoing on selectedFirst&#13;Guard:  [isCurrentPlayerTheLastInTurn()]" ] ;
  
  start_Gameplay_Ongoing -> Gameplay_gamestatusOngoing_CreatingNextDraft [  tooltip = "start to Ongoing.CreatingNextDraft" ] ;
    Gameplay_gamestatusOngoing_SelectingDomino -> Gameplay_gamestatusOngoing_CreatingNextDraft [  label = "selected [isCurrentPlayerTheLastInTurn()] / ", tooltip = "From Ongoing.SelectingDomino to Ongoing.CreatingNextDraft on selected&#13;Guard:  [isCurrentPlayerTheLastInTurn()]&#13;Transition Action:
   " ] ;
  
  Gameplay_gamestatusOngoing_CreatingNextDraft -> Gameplay_gamestatusOngoing_PreplacingDomino [  label = "draftReady / {...}", tooltip = "From Ongoing.CreatingNextDraft to Ongoing.PreplacingDomino on draftReady&#13;Transition Action:
   revealNextDraft();" ] ;
  
  Gameplay_gamestatusOngoing_PlacingDomino -> Gameplay_gamestatusOngoing_PreplacingDomino [  label = "placed [isCurrentTurnTheLastInGame() && !isCurrentPlayerTheLastInTurn()] / ", tooltip = "From Ongoing.PlacingDomino to Ongoing.PreplacingDomino on placed&#13;Guard:  [isCurrentTurnTheLastInGame() && !isCurrentPlayerTheLastInTurn()]&#13;Transition Action:
   " ] ;
  
  Gameplay_gamestatusOngoing_DiscardingDomino -> Gameplay_gamestatusOngoing_PreplacingDomino [  label = "discarded [isCurrentTurnTheLastInGame() && !isCurrentPlayerTheLastInTurn()] / ", tooltip = "From Ongoing.DiscardingDomino to Ongoing.PreplacingDomino on discarded&#13;Guard:  [isCurrentTurnTheLastInGame() && !isCurrentPlayerTheLastInTurn()]&#13;Transition Action:
   " ] ;
  
  Gameplay_gamestatusOngoing_SelectingDomino -> Gameplay_gamestatusOngoing_PreplacingDomino [  label = "selected [!isCurrentPlayerTheLastInTurn()] / {...}", tooltip = "From Ongoing.SelectingDomino to Ongoing.PreplacingDomino on selected&#13;Guard:  [!isCurrentPlayerTheLastInTurn()]&#13;Transition Action:
   setNextPlayer();" ] ;
  
  Gameplay_gamestatusOngoing_PreplacingDomino -> Gameplay_gamestatusOngoing_PlacingDomino [  label = "preplaced [isThereAValidPlacement()]", tooltip = "From Ongoing.PreplacingDomino to Ongoing.PlacingDomino on preplaced&#13;Guard:  [isThereAValidPlacement()]" ] ;
  
  Gameplay_gamestatusOngoing_PreplacingDomino -> Gameplay_gamestatusOngoing_DiscardingDomino [  label = "preplaced [!isThereAValidPlacement()]", tooltip = "From Ongoing.PreplacingDomino to Ongoing.DiscardingDomino on preplaced&#13;Guard:  [!isThereAValidPlacement()]" ] ;
  
  Gameplay_gamestatusOngoing_PlacingDomino -> Gameplay_gamestatusOngoing_SelectingDomino [  label = "placed [!isCurrentTurnTheLastInGame()] / ", tooltip = "From Ongoing.PlacingDomino to Ongoing.SelectingDomino on placed&#13;Guard:  [!isCurrentTurnTheLastInGame()]&#13;Transition Action:
   " ] ;
  
  Gameplay_gamestatusOngoing_DiscardingDomino -> Gameplay_gamestatusOngoing_SelectingDomino [  label = "discarded [!isCurrentTurnTheLastInGame()] / ", tooltip = "From Ongoing.DiscardingDomino to Ongoing.SelectingDomino on discarded&#13;Guard:  [!isCurrentTurnTheLastInGame()]&#13;Transition Action:
   " ] ;
  
  Gameplay_gamestatusOngoing_SelectingDomino -> Gameplay_gamestatusOngoing_SelectingDomino [  label = "selected [!isSelectionValid()]", tooltip = "From Ongoing.SelectingDomino to Ongoing.SelectingDomino on selected&#13;Guard:  [!isSelectionValid()]" ] ;
  
  Gameplay_gamestatusOngoing_PlacingDomino -> Gameplay_gamestatus_Over [  label = "placed [isCurrentTurnTheLastInGame() && isCurrentPlayerTheLastInTurn()] / ", tooltip = "From Ongoing.PlacingDomino to Over on placed&#13;Guard:  [isCurrentTurnTheLastInGame() && isCurrentPlayerTheLastInTurn()]&#13;Transition Action:
   " ] ;
  
  Gameplay_gamestatusOngoing_DiscardingDomino -> Gameplay_gamestatus_Over [  label = "discarded [isCurrentTurnTheLastInGame() && isCurrentPlayerTheLastInTurn()] / ", tooltip = "From Ongoing.DiscardingDomino to Over on discarded&#13;Guard:  [isCurrentTurnTheLastInGame() && isCurrentPlayerTheLastInTurn()]&#13;Transition Action:
   " ] ;
  

}
